package fr.ariloxe.arena.kits.release;

import fr.ariloxe.arena.ArenaAPI;
import fr.ariloxe.arena.kits.KitSchedule;
import fr.ariloxe.arena.kits.KitType;
import fr.ariloxe.arena.player.KPlayer;
import fr.ariloxe.arena.utils.ItemCreator;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.enchantments.Enchantment;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class OursKit extends KitSchedule {

    private static final int MAX_HEALTH = 20; // 10 cœurs
    private static final int FORCE_DURATION = 15 * 20; // 15 secondes de Force
    private static final int HEALTH_REGEN_INTERVAL = 100; // Intervalle de 5 secondes pour la régénération
    private static final int SACRIFICE_COOLDOWN = 35; // Cooldown de 35 secondes

    // Cooldowns et kills des joueurs
    private final Map<UUID, Long> cooldowns = new HashMap<>();
    private final Map<UUID, Boolean> killStatus = new HashMap<>();

    public OursKit() {
        super("Ours", KitType.TANK, new ItemStack(Material.STICK),
                "§8» §7Mode : §bElityBox §7(§fHommage§7)",
                "§8» §7Pouvoirs:",
                "§f- §7Utilisez l'item Sacrifice pour obtenir Force I pendant 15 secondes.",
                "§f- §7Perdez 1 cœur permanent si vous ne tuez personne pendant cette période.",
                "§f- §7Résistance permanente.",
                "§f- §7Régénération d'un cœur toutes les 5 secondes.");
    }

    @Override
    public void onEquip(Player player) {
        player.setMaxHealth(MAX_HEALTH);
        player.setHealth(player.getMaxHealth());

        // Enchanter l'armure avec Thorns II
        ItemStack[] armor = player.getInventory().getArmorContents();
        for (ItemStack item : armor) {
            if (item != null && item.getType() != Material.AIR) {
                item.addEnchantment(Enchantment.THORNS, 2); // Thorns II
            }
        }
        player.getInventory().setArmorContents(armor);

        // Effet de Résistance permanent
        player.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, Integer.MAX_VALUE, 0, false, false));

        // Ajout de l'item Sacrifice
        ItemStack sacrifice = new ItemCreator(Material.STICK).name("§6Sacrifice §8§l▪ §7Clic-droit pour activer").get();
        player.getInventory().addItem(sacrifice);

        // Régénération naturelle
        startNaturalRegeneration(player);
    }

    private void startNaturalRegeneration(Player player) {
        new BukkitRunnable() {
            @Override
            public void run() {
                if (player.isOnline()) {
                    double health = player.getHealth();
                    if (health < player.getMaxHealth()) {
                        player.setHealth(Math.min(health + 2.0, player.getMaxHealth())); // Régénérer 1 cœur
                    }
                } else {
                    cancel(); // Arrêter si le joueur est déconnecté
                }
            }
        }.runTaskTimer(ArenaAPI.getApi(), 0L, HEALTH_REGEN_INTERVAL); // Toutes les 5 secondes
    }

    public void activateSacrifice(KPlayer kPlayer) {
        Player player = kPlayer.getBukkitPlayer();
        if (player != null && !isInCooldown(player.getUniqueId())) { // Vérifie le cooldown
            // Appliquer le cooldown de 35 secondes
            setCooldown(player.getUniqueId());

            // Réinitialiser le statut de kill
            killStatus.put(player.getUniqueId(), false);

            // Ajouter l'effet de Force I pour 15 secondes
            player.addPotionEffect(new PotionEffect(PotionEffectType.INCREASE_DAMAGE, FORCE_DURATION, 0, false, false));

            new BukkitRunnable() {
                @Override
                public void run() {
                    if (!killStatus.get(player.getUniqueId())) {
                        // Pénalité : Perdre 1 cœur permanent et envoyer un message au joueur
                        double newMaxHealth = Math.max(2.0, player.getMaxHealth() - 2.0);
                        player.setMaxHealth(newMaxHealth);
                        player.setHealth(Math.min(player.getHealth(), newMaxHealth)); // Ajuster la santé actuelle
                        player.sendMessage("§cVous n'avez tué personne pendant la durée de Sacrifice et avez perdu 1 cœur permanent.");
                    }
                    cancel();
                }
            }.runTaskLater(ArenaAPI.getApi(), FORCE_DURATION); // Fin de l'effet de Force
        } else {
            player.sendMessage("§cSacrifice est en cooldown pour encore " + getRemainingCooldown(player.getUniqueId()) + " secondes.");
        }
    }

    // Gestion des cooldowns
    private void setCooldown(UUID playerId) {
        cooldowns.put(playerId, System.currentTimeMillis() + (SACRIFICE_COOLDOWN * 1000));
    }

    private boolean isInCooldown(UUID playerId) {
        return cooldowns.containsKey(playerId) && cooldowns.get(playerId) > System.currentTimeMillis();
    }

    private long getRemainingCooldown(UUID playerId) {
        return (cooldowns.get(playerId) - System.currentTimeMillis()) / 1000;
    }

    public void registerKill(Player player) {
        killStatus.put(player.getUniqueId(), true);
    }
}
