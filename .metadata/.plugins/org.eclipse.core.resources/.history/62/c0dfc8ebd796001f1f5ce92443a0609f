package fr.ariloxe.arena.kits.release;

import fr.ariloxe.arena.ArenaAPI;
import fr.ariloxe.arena.kits.KitSchedule;
import fr.ariloxe.arena.kits.KitType;
import fr.ariloxe.arena.player.KPlayer;
import fr.ariloxe.arena.utils.ItemCreator;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.enchantments.Enchantment;

/**
 * Kit Ours
 */
public class OursKit extends KitSchedule {

    private static final int MAX_HEALTH = 20; // 10 cœurs
    private static final int FORCE_DURATION = 20 * 20; // 20 secondes de Force
    private static final int HEALTH_REGEN_INTERVAL = 100; // Intervalle de 5 secondes pour la régénération

    public OursKit() {
        super("Ours", KitType.TANK, new ItemStack(Material.STICK),
                "§8» §7Mode : §bElityBox §7(§fHommage§7)",
                "§8» §7Pouvoirs:",
                "§f- §7Utilisez l'item Sacrifice pour obtenir Force I pendant 20 secondes.",
                "§f- §7Perdez 1 cœur permanent si vous ne tuez personne pendant cette période.",
                "§f- §7Résistance permanente.",
                "§f- §7Régénération d'un cœur toutes les 5 secondes.");
    }

    @Override
    public void onEquip(Player player) {
        player.setMaxHealth(MAX_HEALTH);
        player.setHealth(player.getMaxHealth());

        // Enchanter l'armure avec Thorns II
        ItemStack[] armor = player.getInventory().getArmorContents();
        for (ItemStack item : armor) {
            if (item != null && item.getType() != Material.AIR) {
                item.addEnchantment(Enchantment.THORNS, 2); // Thorns II
            }
        }
        player.getInventory().setArmorContents(armor);

        // Effet de Résistance permanent
        player.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, Integer.MAX_VALUE, 0, false, false));

        // Ajout de l'item Sacrifice
        ItemStack sacrifice = new ItemCreator(Material.STICK).name("§6Sacrifice §8§l▪ §7Clic-droit pour activer").get();
        player.getInventory().addItem(sacrifice);

        // Régénération naturelle
        startNaturalRegeneration(player);
    }

    private void startNaturalRegeneration(Player player) {
        new BukkitRunnable() {
            @Override
            public void run() {
                if (player.isOnline()) {
                    double health = player.getHealth();
                    if (health < player.getMaxHealth()) {
                        player.setHealth(Math.min(health + 2.0, player.getMaxHealth())); // Régénérer 1 cœur
                    }
                } else {
                    cancel(); // Arrêter si le joueur est déconnecté
                }
            }
        }.runTaskTimer(ArenaAPI.getApi(), 0L, HEALTH_REGEN_INTERVAL); // Toutes les 5 secondes
    }

    public void activateSacrifice(KPlayer kPlayer) {
        Player player = kPlayer.getBukkitPlayer();
        if (player != null) {
            // Ajouter l'effet de Force I pour 20 secondes sans son
            player.addPotionEffect(new PotionEffect(PotionEffectType.INCREASE_DAMAGE, FORCE_DURATION, 0, false, false));

            new BukkitRunnable() {
                private boolean killed = false;

                @Override
                public void run() {
                    if (!killed) {
                        // Perdre 1 cœur permanent
                        double newMaxHealth = Math.max(2.0, player.getMaxHealth() - 2.0);
                        player.setMaxHealth(newMaxHealth);
                        player.setHealth(Math.min(player.getHealth(), newMaxHealth)); // Ajuster la santé actuelle
                    }
                    cancel();
                }

                public void onPlayerKill() {
                    killed = true; // Annuler la pénalité si un kill est effectué
                }
            }.runTaskLater(ArenaAPI.getApi(), FORCE_DURATION); // Fin de l'effet de Force
        }
    }
}
